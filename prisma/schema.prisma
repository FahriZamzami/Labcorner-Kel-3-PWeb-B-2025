generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// PASTIKAN BLOK ENUM INI ADA DI ATAS MODEL ANDA
enum Peran {
  admin
  mahasiswa
  asisten
}

enum StatusTugas {
  open
  close
}

enum StatusAbsensi {
  Hadir
  Tidak_Hadir
}
// AKHIR DARI BLOK ENUM


model user {
  id           String         @id
  fullName     String?      // <-- TAMBAHKAN INI DENGAN TANDA TANYA
  username     String         @unique
  kata_sandi   String
  peran        Peran
  dibuat_pada   DateTime      @default(now())

  mahasiswa     mahasiswa[]
  pengumpulan   pengumpulan[]
  pengumuman    pengumuman[]  @relation("PengumumanPembuat")
  absensi       absensi[]
  asistenLab    asistenLab[]
}

model lab {
  id          Int      @id @default(autoincrement())
  nama_lab    String   @unique
  deskripsi   String?
  jadwal      String?
  dosen       String?
  kapasitas   Int      @default(30)
  status      String   @default("aktif")
  dibuat_pada DateTime @default(now())
  
  praktikum   praktikum[]
  asistenLab  asistenLab[]
}

model asistenLab {
  id      Int    @id @default(autoincrement())
  user_id String
  lab_id  Int
  user    user   @relation(fields: [user_id], references: [id])
  lab     lab    @relation(fields: [lab_id], references: [id])

  @@unique([user_id, lab_id])
}

model praktikum {
  id             Int          @id @default(autoincrement())
  nama_praktikum String
  kode_masuk     String       @unique
  lab_id         Int
  dibuat_pada    DateTime     @default(now())

  lab          lab          @relation(fields: [lab_id], references: [id])
  mahasiswa    mahasiswa[]
  jadwal       jadwal[]
  modul        modul[]
  tugas        tugas[]
  pengumuman   pengumuman[]
}

model mahasiswa {
  id             Int       @id @default(autoincrement())
  user_id        String
  praktikum_id   Int
  waktu_daftar   DateTime?
  user           user      @relation(fields: [user_id], references: [id])
  praktikum      praktikum @relation(fields: [praktikum_id], references: [id])

  @@unique([user_id, praktikum_id])
}

model jadwal {
  id             Int       @id @default(autoincrement())
  praktikum_id   Int
  tanggal        DateTime
  jam            DateTime
  ruangan        String?
  materi         String?
  nama_pengajar  String?
  dibuat_pada    DateTime  @default(now())

  praktikum    praktikum @relation(fields: [praktikum_id], references: [id])
  absensi      absensi[]
}

model modul {
  id            Int       @id @default(autoincrement())
  praktikum_id  Int
  judul         String
  file_path     String
  diunggah_pada DateTime  @default(now())
  praktikum     praktikum @relation(fields: [praktikum_id], references: [id])
}

model tugas {
  id               Int           @id @default(autoincrement())
  praktikum_id     Int
  judul            String
  deskripsi        String?
  fileTugas        String?
  batas_waktu      DateTime
  dibuat_pada      DateTime      @default(now())
  status           StatusTugas   @default(open)
  tutup_penugasan  Boolean       @default(false)

  praktikum        praktikum     @relation(fields: [praktikum_id], references: [id])
  pengumpulan      pengumpulan[]
}

model pengumpulan {
  id           Int       @id @default(autoincrement())
  tugas_id     Int
  user_id      String
  file_path    String?
  waktu_kirim  DateTime?
  nilai        Float?
  catatan      String?

  tugas        tugas     @relation(fields: [tugas_id], references: [id])
  user         user      @relation(fields: [user_id], references: [id])
}

model pengumuman {
  id           Int       @id @default(autoincrement())
  judul        String    // Judul pengumuman
  isi          String    // Isi pengumuman
  prioritas    String    @default("sedang") // rendah, sedang, tinggi
  target_lab   String?   // null = semua lab, atau nama lab spesifik
  praktikum_id Int?      // ID praktikum (opsional, untuk pengumuman umum)
  dibuat_oleh  String
  dibuat_pada  DateTime  @default(now())
  status       String    @default("aktif") // aktif, nonaktif

  pembuat      user      @relation("PengumumanPembuat", fields: [dibuat_oleh], references: [id])
  praktikum    praktikum? @relation(fields: [praktikum_id], references: [id])
}

model absensi {
  id        Int           @id @default(autoincrement())
  user_id   String
  jadwal_id Int
  status    StatusAbsensi // Sekarang Prisma tahu apa itu 'StatusAbsensi'
  user      user          @relation(fields: [user_id], references: [id])
  jadwal    jadwal        @relation(fields: [jadwal_id], references: [id])
}